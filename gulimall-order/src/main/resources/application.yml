spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://192.168.200.136:3306/gulimall_oms?useSSL=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
  application:
    name: gulimall-order


  rabbitmq:
    host: 192.168.200.136
    port: 5672
    username: admin
    password: admin
    virtual-host: /
    publisher-confirm-type: correlated
    publisher-returns: true
    listener:
      simple:
        acknowledge-mode: manual  #手动接收消息
  main:
    allow-circular-references: true
  session:
    store-type: redis
  redis:
    host: 192.168.200.136
    password: li158158@yt
  thymeleaf:
    cache: false


mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  global-config:
    db-config:
      id-type: auto

server:
  port: 10000

gulimall:
  thread:
    core-pool-size: 20
    max-pool-size: 200
    keep-alive-time: 200


#
#seata:
#  enabled: true
#  enable-auto-data-source-proxy: true #是否开启数据源自动代理,默认为true
#  tx-service-group: fsp_tx_group  #要与配置文件中的vgroupMapping一致
#  registry:  #registry根据seata服务端的registry配置
#    type: nacos #默认为file
#    nacos:
#      application: seata-server #配置自己的seata服务
#      server-addr: localhost:8848 #根据自己的seata服务配置
#      username: nacos #根据自己的seata服务配置
#      password: nacos #根据自己的seata服务配置
#      namespace: public #根据自己的seata服务配置
#      cluster: default # 配置自己的seata服务cluster, 默认为 default
#      group: DEFAULT_GROUP #根据自己的seata服务配置
#  config:
#    type: nacos #默认file,如果使用file不配置下面的nacos,直接配置seata.service
#    nacos:
#      server-addr: localhost:8848 #配置自己的nacos地址
#      group: DEFAULT_GROUP #配置自己的dev
#      username: nacos #配置自己的username
#      password: nacos #配置自己的password
#      namespace: public #配置自己的namespace
#      dataId: seata.order.properties #配置自己的dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好
#







